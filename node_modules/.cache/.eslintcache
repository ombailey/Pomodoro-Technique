[{"/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/index.js":"1","/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/App.js":"2","/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/reportWebVitals.js":"3"},{"size":535,"mtime":1655902345081,"results":"4","hashOfConfig":"5"},{"size":7154,"mtime":1656549140943,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1655902345082,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"aux17k",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/index.js",[],[],[],"/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/App.js",["19","20","21","22","23"],[],"import \"./App.css\";\nimport React from \"react\";\nimport { UilArrowUp } from \"@iconscout/react-unicons\";\nimport { UilArrowDown } from \"@iconscout/react-unicons\";\nimport { UilPlay } from \"@iconscout/react-unicons\";\nimport { UilPause } from \"@iconscout/react-unicons\";\nimport { UilRepeat } from \"@iconscout/react-unicons\";\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessLength: 25,\n      timer: 1500,\n      session: \"Session\",\n      mode: \"inactive\",\n    };\n    this.increaseBreak = this.increaseBreak.bind(this);\n    this.decreaseBreak = this.decreaseBreak.bind(this);\n    this.increaseSession = this.increaseSession.bind(this);\n    this.decreaseSession = this.decreaseSession.bind(this);\n    this.timeConverter = this.timeConverter.bind(this);\n    this.reset = this.reset.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.decreaseTimer = this.decreaseTimer.bind(this);\n    this.pauseTimer = this.pauseTimer.bind(this);\n    this.timerControl = this.timerControl.bind(this);\n    this.buzzer = this.buzzer.bind(this);\n  }\n\n  increaseBreak() {\n    let value = this.state.breakLength;\n    if (value === 60) {\n      return value;\n    }\n    this.setState({\n      breakLength: value + 1,\n    });\n  }\n\n  decreaseBreak() {\n    let value = this.state.breakLength;\n    if (value === 1) {\n      return value;\n    }\n    this.setState({\n      breakLength: value - 1,\n    });\n  }\n\n  increaseSession() {\n    let value = this.state.sessLength;\n    if (value === 60) {\n      return value;\n    }\n    this.setState({\n      sessLength: value + 1,\n      timer: this.state.timer + 60,\n    });\n  }\n\n  decreaseSession() {\n    let value = this.state.sessLength;\n    if (value === 1) {\n      return value;\n    }\n    this.setState({\n      sessLength: value - 1,\n      timer: this.state.timer - 60,\n    });\n  }\n\n  reset() {\n    this.setState({\n      breakLength: 5,\n      sessLength: 25,\n      timer: 1500,\n      session: \"Session\",\n      mode: \"inactive\",\n    });\n    clearInterval(this.begin);\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n  }\n\n  timeConverter(number) {\n    let minutes = Math.floor(number / 60);\n    let seconds = number - minutes * 60;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    return minutes + \":\" + seconds;\n  }\n\n  startTimer() {\n    if (this.state.mode === \"inactive\") {\n      this.setState({\n        mode: \"active\",\n      });\n      this.begin = setInterval(() => {\n        this.decreaseTimer();\n        this.timerControl();\n      }, 1000);\n    } else {\n      return;\n    }\n  }\n\n  decreaseTimer() {\n    this.setState({\n      timer: this.state.timer - 1,\n    });\n  }\n\n  timerControl() {\n    if ((this.state.timer == 0) & (this.state.session === \"Session\")) {\n      this.setState({\n        session: \"Break\",\n        timer: this.state.breakLength * 60,\n      });\n      this.buzzer();\n    }\n    if ((this.state.timer == 0) & (this.state.session === \"Break\")) {\n      this.setState({\n        session: \"Session\",\n        timer: this.state.sessLength * 60,\n      });\n      this.buzzer();\n    }\n  }\n\n  buzzer() {\n    if (this.state.timer == 0) {\n      this.audioBeep.play();\n    }\n  }\n\n  pauseTimer() {\n    if (this.state.mode === \"active\") {\n      this.setState({\n        mode: \"inactive\",\n      });\n      clearInterval(this.begin);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"pomodoro\">\n        <h1>Pomodoro Technique</h1>\n        <SessionControls\n          increaseBreak={this.increaseBreak}\n          decreaseBreak={this.decreaseBreak}\n          breakLength={this.state.breakLength}\n          increaseSession={this.increaseSession}\n          decreaseSession={this.decreaseSession}\n          sessLength={this.state.sessLength}\n        />\n        <div className=\"timer\">\n          <div id=\"timer-label\" className=\"label\">\n            <h2>{this.state.session}</h2>\n          </div>\n          <div id=\"time-left\" className=\"numbers\">\n            {this.timeConverter(this.state.timer)}\n          </div>\n          <TimerControls\n            reset={this.reset}\n            startTimer={this.startTimer}\n            pauseTimer={this.pauseTimer}\n          />\n        </div>\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          ref={(audio) => {\n            this.audioBeep = audio;\n          }}\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </div>\n    );\n  }\n}\n\nclass SessionControls extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"top-controls\">\n        <div className=\"break controls\">\n          <div id=\"break-label\" className=\"label\">\n            <h2> Break Length </h2>\n          </div>\n          <div className=\"scontrols\">\n            <button\n              onClick={this.props.increaseBreak}\n              className=\"session-btns\"\n              id=\"break-increment\"\n            >\n              <span className=\"arrows\">\n                <UilArrowUp />\n              </span>\n            </button>\n            <p id=\"break-length\" className=\"numbers\">\n              {this.props.breakLength}\n            </p>\n            <button\n              onClick={this.props.decreaseBreak}\n              className=\"session-btns\"\n              id=\"break-decrement\"\n            >\n              <span className=\"arrows\">\n                <UilArrowDown />\n              </span>\n            </button>\n          </div>\n        </div>\n        <div className=\"session controls\">\n          <div id=\"session-label\" className=\"label\">\n            <h2> Session Length</h2>\n          </div>\n          <div className=\"scontrols\">\n            <button\n              onClick={this.props.increaseSession}\n              className=\"session-btns\"\n              id=\"session-increment\"\n            >\n              <span className=\"arrows\">\n                <UilArrowUp />\n              </span>\n            </button>\n            <p id=\"session-length\" className=\"numbers\">\n              {this.props.sessLength}\n            </p>\n            <button\n              onClick={this.props.decreaseSession}\n              className=\"session-controls\"\n              id=\"session-decrement\"\n            >\n              <span className=\"arrows\">\n                <UilArrowDown />\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass TimerControls extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"timer-controls\">\n        <div id=\"start_stop\">\n          <div className=\"timer-btns\">\n            <button onClick={this.props.startTimer}>\n              <UilPlay />\n            </button>\n            <button onClick={this.props.pauseTimer}>\n              <UilPause />\n            </button>\n          </div>\n        </div>\n        <div id=\"reset-btn\">\n          <button id=\"reset\" onClick={this.props.reset}>\n            <UilRepeat />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Timer;\n","/Users/omarbailey/Documents/Coding/React/pomodoro_technique/src/reportWebVitals.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":116,"column":27,"nodeType":"26","messageId":"27","endLine":116,"endColumn":29},{"ruleId":"24","severity":1,"message":"25","line":123,"column":27,"nodeType":"26","messageId":"27","endLine":123,"endColumn":29},{"ruleId":"24","severity":1,"message":"25","line":133,"column":26,"nodeType":"26","messageId":"27","endLine":133,"endColumn":28},{"ruleId":"28","severity":1,"message":"29","line":186,"column":3,"nodeType":"30","messageId":"31","endLine":188,"endColumn":4},{"ruleId":"28","severity":1,"message":"29","line":254,"column":3,"nodeType":"30","messageId":"31","endLine":256,"endColumn":4},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]